#!/usr/bin/env python3
#
# pion-analysis/bin/fit-multi
#

from concurrent.futures.process import ProcessPoolExecutor
import re
import sys
from pathlib import Path
from itertools import product
import subprocess as sp


def arg_parser():
    from argparse import ArgumentParser
    parser = ArgumentParser()
    parser.add_argument("data_id")
    parser.add_argument("--path",
                        default='data')
    parser.add_argument("--fit-1d",
                        action='store_true')
    parser.add_argument("--fit-3d",
                        action='store_true')
    return parser


def main(argv=None):
    if argv is None:
        argv = sys.argv[1:]
    args = arg_parser().parse_args(argv)
    path = Path(args.path)

    dataid = args.data_id

    regex = re.compile(f"{dataid}-(?P<id>[0-9]+).root")

    datafiles = [(str(file.absolute()), m.group('id'))
                 for file in path.rglob(f'{dataid}*.root')
                 if (m := regex.match(file.name))]

    if args.fit_1d:
        run_fit1d(args.data_id, datafiles)

    if args.fit_3d:
        run_fit3d(args.data_id, datafiles)

    return 0


def run_fit1d(dataid,
              datafiles,
              fitrange=0.08,
              fitters=("Fitter1DGaussPolyBg", "Fitter1DLevyPolyBg"),
             ):

    mrc = 'Mrc1DRatioMixed'
    # mrc = 'Mrc1DMatrix'
    # mrc = 'NoMrc'

    fitrange = 0.08

    for filename, part in datafiles:
        for fitter in fitters:
            output_filename = f'fitresults/FR1D-{dataid}-{fitter}-{mrc}-fr{fitrange*100:02g}-{part}.json'
            args = [
                "femtofitter/bin/fit-1d", filename,
                '--fitter', fitter,
                '--fitrange', '%s' % fitrange,
                '--mrc', mrc,
                '--output', output_filename,
            ]
            sp.run(args)


def run_fit3d(dataid,
              datafiles,
              fitranges=(0.08,),
              fitters=("Fitter3DGaussLcms", "Fitter3DLevy"),
              mrcs=('Mrc3DRatioMixed', )
             ):
    

    if isinstance(mrcs, str):
        mrcs = (mrcs, )
    if isinstance(fitters, str):
        fitters = (fitters, )
    if isinstance(fitranges, (float, int, str)):
        fitranges = (float(fitranges), )

    things_to_fit = product(datafiles, fitters, mrcs, fitranges)


    for (filename, part), fitter, mrc, fitrange in things_to_fit:
        output_filename = f'fitresults/FR3D-{dataid}-{fitter}-{mrc}-fr{fitrange*100:02g}-{part}.json'
        args = [
            "femtofitter/bin/fit-3d", filename,
            '--fitter', fitter,
            '--fitrange', '%s' % fitrange,
            '--mrc', mrc,
            '--output', output_filename,
        ]
        sp.run(args)


if __name__ == "__main__":
    exit(main())
